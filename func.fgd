//Vector0 | FGD Forge Game Data - Skye Waddell

//////////////////////
///**BASE CLASSES**///
//////////////////////

//Holds all the Base Classes that other Classes, Entities, and Solids can inherit from.

//Phong Class
@BaseClass color(204 204 204) size(-8 -8 -8, 8 8 8) = Phong
[
	_phong(choices) : "Phong shading" : 0 = 
	[
		0 : "Disabled"
		1 : "Smooth shading"
	]
	_phong_angle(float) : "Phong smoothing angle" : "89"
]

//Entity Class
@BaseClass = func_entity 
[
	targetname(string) : "Target Name" : : ""
	target(target_destination) : "Target" : : ""
]

//In the Scale Property (You will have to add this to Entities)
//You can add 1 scale  value example: 32
//or you can affect the X Y Z scale by providing 3 numbers : 32 64 128

@BaseClass base(func_entity) = ammo
[
	amount(integer) : "Ammo Amount" : 100 : "The amount of bullets the player will pickup from this ammo item."
]

//Scale Class
@BaseClass base(func_entity) = func_entity_scaled 
[
	scale(string) : "Scale. Specificy the scale with X Y Z, or set all to 1 single value. Example #1: 32 64 128 Example #2: 32"
]

//Entity Scaled Class
@BaseClass base(func_entity_scaled) = func_trigger 
[
	
	waittime(float): "Wait Time" : 0 : "How long in seconds until this function is called after being triggered."
	sounds(choices) : "Sound Effect Played on Trigger" : 0 =
	[
		0 : "None"
		1 : "Metal Door Open"
	]
]

//Enemy Class
@BaseClass base(func_entity) = Enemy
[
	collision_range(integer) : "Collision Range" : 2 : "How far in Godot Units this entity can collide with Player entity."
	speed(integer) : "Movement Speed" : 2 : "Entity movement speed"
	hp(integer) : "Max HP" : 100 : "Entity max hp"
	hpcurrent(integer) : "Initial HP" : 100 : "Entity intitial HP on spawn"
]

///////////////////////////
///**FUNC | SOLIDCLASS**///
///////////////////////////

// Functions that you can apply to any brush to make them -do stuff- in the game.

//Worldspawn
@SolidClass color(204 204 204) = worldspawn : "Default static world geometry. Builds a StaticBody3D with a single MeshInstance3D and a single convex CollisionShape3D shape. Also builds Occluder3D to aid in render culling of other VisualInstance3D nodes." []

//Func Detail
@SolidClass color(204 204 204) base(func_entity) = func_detail : "Static collidable geometry. Builds a StaticBody3D with a MeshInstance3D and a single convex CollisionShape3D. Does not occlude other VisualInstance3D nodes." []

//Func Detail Noclip
@SolidClass color(204 204 204) base(func_entity) = func_detail_noclip : "Static Geometry with no collision and doesnt use Alpha." []

//Func Detail Illusionary
@SolidClass color(204 204 204) base(func_entity) = func_detail_illusionary : "Static geometry with no collision and uses Alpha for Decals/Fencing. Builds a Node3D with a MeshInstance3D. Does not occlude other VisualInstance3D nodes." []

//Func Glass
@SolidClass color(204 204 204) base(func_entity) = func_glass : "Transparent Glass Mesh" []

//Func Glass
@SolidClass color(204 204 204) base(func_entity) = func_breakable : "Make any object breakable!" 
[
	particleType(choices) : "Particle Type" : 0 =
	[
		0 : "Smoke"
		1 : "Wood"
		2 : "Metal"
	]
	
	explosive(choices) : "Select if this object explodes when it is broken as well." : 0 =
	[
		0 : "False"
		1 : "True"
	]
]

//Func Physics
@SolidClass color(204 204 204) base(func_entity) = func_physics : "Builds RigidBody3D Brush." []

//Func Physics Breakable
@SolidClass color(204 204 204) base(func_breakable) = func_physics_breakable : "Make any physics object also breakable." []

//Func Water
@SolidClass color(204 204 204) base(func_entity) = func_water : "Turns brush into Water in-game." 
[
	color(color255) : "Water Color" : "255 255 255"
	alpha(float) : "Water Alpha" : 0.6 : "Control how see-through the liquid is. Default=0.6"
]

//Func Ladder
@SolidClass color(204 204 204) base(func_detail) = func_ladder : "Turns brush into a Ladder for the player." []

//Func Animated
@SolidClass color(204 204 204) base(func_detail) = func_animated : "Turns brush into an animated texture that plays at 30FPS (up to 10 frames)." 
[
	fps(float) : "Animation Speed FPS" : 15.0 : "Control the animation speed of the brush"

	texture0(string) : "Texture #0" : "" : ""
	texture1(string) : "Texture #1" : "" : ""
	texture2(string) : "Texture #2" : "" : ""
	texture3(string) : "Texture #3" : "" : ""
	texture4(string) : "Texture #4" : "" : ""
	texture5(string) : "Texture #5" : "" : ""
	texture6(string) : "Texture #6" : "" : ""
	texture7(string) : "Texture #7" : "" : ""
	texture8(string) : "Texture #8" : "" : ""
	texture9(string) : "Texture #9" : "" : ""
]

//Func Switch
@SolidClass color(204 204 204) base(func_detail) = func_switch : "Turns brush into a switch with multiple textures." 
[
	texture_on(string) : "Texture On" : "+1_switch_brown" : "Type the name of the texture when this switch is ON (without file extension)"
	texture_off(string) : "Texture Off" : "-1_switch_brown" : "Type the name of the texture when this switch is OFF (without file extension)"
	texture_nopower(string) : "Texture No Power" : "-1_switch_brown" : "Type the name of the texture when this switch has NO POWER (without file extension)"

	on(choices): "Controls if the switch is intially on." : 0 = 
	[
		0 : "Initially Off"
		1 : "Initially On"
	]

	power(choices): "If the switch initially has power to be turned on." : 1 =
	[
		0 : "NO POWER"
		1 : "HAS POWER"
	]

]

//Func Door Slide
@SolidClass color(204 204 204) base(func_detail) = func_door_slide : "Sliding door, will open/close when triggered"
[
	speed(float) : "Door Speed (float)" : 6.0 : "Control how fast the door opens. Use negative values to move the door the other way."

	opensize(float) : "Open Size (float)" : 2.1 : "Determines how far the door should open."

	open(choices): "Controls if door is open by default" : 0 =
	[
		0 : "Initially Closed"
		1 : "Initially Open"
	]

	direction(choices): "Controls which direction the door opens" : 0 =
	[
		0 : "X"
		1 : "Y"
		2 : "Z"
	]

	autoclose(choices): "Controls if door closes automatically when the player walks away" : 1 =
	[
		0 : "FALSE"
		1 : "TRUE"
	]

	lockstatus(choices): "Determine the lock status of this door" : 0 =
	[
		0 : "Unlocked"
		1 : "Locked and can only open WHEN triggered"
		2 : "Locked and can only open on Interact AFTER triggered"
	]
]
 
///////////////////////////
////**TRIGGER BRUSHES**////
///////////////////////////

//Trigger Brushes are usually invisible objects that are designed to be called by a Trigger Entity to perform a function/effect

//Default Trigger targets other triggers!!!
@SolidClass color(204 204 204) base(func_detail) = trigger_caller : "Trigger Methods on different Entities upon Collision."
[
	chaintrigger(target_destination) : "Chain Trigger" : : "Chain a trigger to this trigger that will also then be triggered. it's like magic."

	countmax(integer) : "Counter Max" : 0 : "The trigger will increment the counter value every time it is triggered. If the Counter is Greater or Equal to the countMax after being interacted with: The trigger function on it's target will be invoked."

	waittime(float) : "Wait Time" : 0.0 : "How long until Effect detonates after being triggered"

	type(flags) =
	[
		1 : "Trigger On Collision" : 1
		2 : "Trigger On Interact Pressed" : 0 
		3 : "Trigger On Both" : 0
	]

	func(choices): "Function" : 0 : "Function/Trigger to call. For most to all entities, their trigger effect is on_trigger. For lights/doors etc. this will turn them on, then off as well. Hurt will call Hurt() on its target. Teleport will call Teleport() on the Target. ChangeLevel will call ChangeLevel() for the Player" =
	[
		0 : "on_trigger"
	]

	
	//Is this trigger active by default?
	triggered(flags) =
	[ 
		1 : "Starts Triggered" : 0 
	]

	//Is this trigger destroyed upon colliding with Player?
	permanent(flags) = 
	[ 
		1 : "Permanent" : 0 
	] 
]

//Trigger Sound
@SolidClass color(204 204 204) base(func_detail_illusionary) = trigger_sound : "When triggered it will play a Sound Effect from the Target's Location" 
[
	sfx(flags) =
	[
		1 : "Explosion" : 0
		2 : "Glass Breaking" : 0 
	]
]

//Trigger Hurt
@SolidClass color(204 204 204) base(func_detail_illusionary) = trigger_hurt : "When triggered it will hurt the target. Only works on Monsters & Players." [
	damage(integer) : "Damage Amount" : 10 : ""
]

//Trigger Autosave
@SolidClass color(204 204 204) base(func_detail_illusionary) = trigger_autosave : "When triggered it will AutoSave the game" []

//Trigger Change Level
@SolidClass color(204 204 204) base(func_detail_illusionary) = trigger_changelevel : "When triggered it will change the level" [
	level(string) : "Level to goto" : : ""
]

//Trigger Change Target
@SolidClass color(204 204 204) base(func_detail_illusionary) = trigger_changetarget : "When triggered it will change the target of another entity" [
	newtarget(string)  : "New Target's Targetname" : : ""
]

//Trigger End Section
@SolidClass color(204 204 204) base(func_detail_illusionary) = trigger_endsection : "When triggered it will end the current game and return the player to the main menu" []

//Trigger Gravity
@SolidClass color(204 204 204) base(func_detail_illusionary) = trigger_gravity : "When triggered it will change the Gravity of the Target" [
	gravity(integer) : "New Gravity Amount (Default = 20, Swimming = 5)" : 20 : ""
]

//Trigger Teleport
@SolidClass color(204 204 204) base(func_detail_illusionary) = trigger_teleport : "When triggered it will Telport the Target to the Teleport Target" [
	teleporttarget(target_destination) : "Target Teleport Destination" : : ""
]


////////////////
////**INFO**////
////////////////

//These Entities are crucial for a map to work properly

//Player
@PointClass base(func_entity) color(204 204 204) model({"path":"glb/debug_player/debug_player.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = info_player_start : "Player Entity Spawn Point." 
[
	spawndir(choices): "spawndir" : 0 =
	[
		0: "forward"
		1: "backward"
		2: "left"
		3: "right"
	]
]

//////////////////////////
///////**ENTITIES**///////
//////////////////////////
//Some predefined entities that can be used quickly to assist in the mapping/brushing process

//Valve
@PointClass base(func_entity) color(204 204 204) model({"path":"glb/valve/switch_valve.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = switch_valve : "Switch Valve" []

//Car Police
@PointClass base(func_entity) color(204 204 204) model({"path":"glb/car_police/car_police.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = car_police : "Car Police" []

//Computer
@PointClass base(func_entity) color(204 204 204) model({"path":"glb/computer/entity_computer.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = entity_computer : "Computer" []

//Shipping Crate
@PointClass base(func_entity) color(204 204 204) model({"path":"glb/shippingcrate/entity_shippingcrate.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = entity_shippingcrate : "Shipping Container" []

//Light Default (no model)
@PointClass base(func_entity) color(204 204 204) size(-8 -8 -8, 8 8 8) = light_default : "Light Default" []

//Light #1
@PointClass base(func_entity) color(204 204 204) model({"path":"glb/light1/light_light1.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = light_light1 : "Light 1" []

///////////////
///**ITEMS**///
///////////////
//Pickup Items that the Player can get

//Health Pack
@PointClass base(func_entity) color(204 204 204) model({"path":"glb/healthpack/item_healthpack.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = item_healthpack : "Health Pack" []

//////////////////////////////
///////**AMMO PICKUPS**///////
//////////////////////////////
@PointClass base(ammo) color(204 204 204) model({"path":"glb/ammo/9mm_large/ammo_9mm_large.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8)         = ammo_9mm_large     : "9mm Ammo" []
@PointClass base(ammo) color(204 204 204) model({"path":"glb/ammo/357_large/ammo_357_large.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8)         = ammo_357_large     : "357 Ammo" []
@PointClass base(ammo) color(204 204 204) model({"path":"glb/ammo/carbine_large/ammo_carbine_large.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = ammo_carbine_large : "Carbine Ammo" []
@PointClass base(ammo) color(204 204 204) model({"path":"glb/ammo/shotgun_large/ammo_shotgun_large.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = ammo_shotgun_large : "Shotgun Ammo" []

//////////////////////////////
///////**WEAPON PICKUPS**///////
//////////////////////////////
@PointClass base(ammo) color(204 204 204) model({"path":"glb/weapons/pistol/weapon_pistol.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = weapon_pistol        : "9mm Pistol"      [ weapontype(integer) : "Weapon Type" : 1 : "" ]
@PointClass base(ammo) color(204 204 204) model({"path":"glb/weapons/carbine/weapon_carbine.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = weapon_carbine       : "Carbine"         [ weapontype(integer) : "Weapon Type" : 2 : "" ]
@PointClass base(ammo) color(204 204 204) model({"path":"glb/weapons/shotgun/weapon_shotgun.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = weapon_shotgun       : "Shotgun"         [ weapontype(integer) : "Weapon Type" : 3 : "" ]
@PointClass base(ammo) color(204 204 204) model({"path":"glb/weapons/revolver/weapon_revolver.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = weapon_revolver      : "Revolver"        [ weapontype(integer) : "Weapon Type" : 4 : "" ]
//@PointClass base(ammo) color(204 204 204) model({"path":"glb/ammo/9mm_large/ammo_9mm_large.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = weapon_crowbar       : "Crowbar"         [ weapontype(integer) : "Weapon Type" : 5 : "" ]
//@PointClass base(ammo) color(204 204 204) model({"path":"glb/ammo/9mm_large/ammo_9mm_large.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = weapon_submachinegun : "Sub Machine Gun" [ weapontype(integer) : "Weapon Type" : 6 : "" ]
@PointClass base(ammo) color(204 204 204) model({"path":"glb/weapons/knife/weapon_knife.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = weapon_knife         : "Knife"           [ weapontype(integer) : "Weapon Type" : 7 : "" ]
@PointClass base(ammo) color(204 204 204) model({"path":"glb/weapons/mp/weapon_mp.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = weapon_mp            : "MP"              [ weapontype(integer) : "Weapon Type" : 8 : "" ]

///////////////
////**NPC**////
///////////////
//Stores all the NPC's in the game

//Doctor #1
@PointClass base(func_entity) color(204 204 204) model({"path":"glb/debug_npc/debug_npc.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = npc_doctor1 : "Doctor NPC #1" []

///////////////////
////**MONSTER**////
///////////////////
//Stores all the Enemy's / Monsters in the game

//Scorpion Alien
@PointClass base(func_entity) color(204 204 204) model({"path":"glb/alien_scorpion/monster_scorpion.glb", "scale":"1"}) size(-8 -8 -8, 8 8 8) = monster_scorpion : "Scorpion Alien Monster" []

//Laser Eye Alien
@PointClass base(func_entity) color(204 204 204) model({"path":"glb/monster_lasereye/lasereye.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = monster_lasereye : "Laser Eye Alien" []

//Soldier
@PointClass base(func_entity) color(204 204 204) model({"path":"glb/soldier/soldier.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = monster_soldier : "Soldier" []

////////////////
////**PATH**////
////////////////
//These define path points and positions for entities

//Walk Point
@PointClass base(func_entity_scaled) color(204 204 204) model({"path":"glb/diamond/path_walkpoint.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = path_walkpoint : "Walk Point. Set new target after NPC collides with self."
[
	waittime(float): "Wait Time" : 0 : "How long the Entity should wait upon collision before moving to new target."
]

//Point
@PointClass base(func_entity_scaled) color(204 204 204) model({"path":"glb/diamond/path_walkpoint.glb", "scale":"32"}) size(-8 -8 -8, 8 8 8) = path_point : "This is an empty invisible node that gets spawned. Useful to get Location in world space for a teleport." []

@baseclass = Light [
	light(integer) : "Brightness" : 200
	style(Choices) : "Appearance" : 0 =
	[
		0 : "Normal"
		10: "Fluorescent flicker"
		2 : "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5 : "Gentle pulse"
		1 : "Flicker A"
		6 : "Flicker B"
		3 : "Candle A"
		7 : "Candle B"
		8 : "Candle C"
		4 : "Fast strobe"
		9 : "Slow strobe"
	]
]

@PointClass size(-8 -8 -8, 8 8 8) base(Light, Target, Targetname) = 
	light : "Invisible lightsource"
	[
		spawnflags(Flags) = [ 1 : "Initially dark" : 0 ]
	]